<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>DyCon Blog</title>
    <description>Welcome to the web interface of DyCon Toolbox, the computational platform developed within the &lt;a href='https://cmc.deusto.eus/dycon/' target='_blank'&gt;ERC DyCon - Dynamic Control&lt;/a&gt; project.</description>
    <link>https://DeustoTech.github.io/DyCon-Blog/</link>
    <atom:link href="https://DeustoTech.github.io/DyCon-Blog/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Wed, 23 Jan 2019 09:01:16 +0100</pubDate>
    <lastBuildDate>Wed, 23 Jan 2019 09:01:16 +0100</lastBuildDate>
    <generator>Jekyll v3.8.5</generator>
    
      <item>
        <title>Wave Control</title>
        <description>A Matlab guide for the numerical approximation of the exact control and stabilization of the wave equation

This webpage contains a free software to compute the control of the wave equation with Matlab.

Features

With wave control you can explore the following:


Exact control of the 1-d wave equation with finite differences and mixed finite elements when the control acts in one extreme.
Exact control of the 2-d wave equation with finite differences and mixed finite elements when the control acts in the boundary.
The stabilization of the 1-D wave equation in an interval with a damping acting on an internal subset, discretized with finite differences and numerical viscosity.
The stabilization of the 2-D wave equation in a square with a damping acting on an internal set, discretized with finite differences and numerical viscosity.


Some views are given below,

Figure 1
Figure 2
Figure 3
Figure 4
Figure 5
Figure 6

Authors: C. Castro, M. Cea, S. Micu, A. Munch, M. Negreanu, Enrique Zuazua
January, 2018
</description>
        <pubDate>Wed, 12 Dec 2018 00:00:00 +0100</pubDate>
        <link>https://DeustoTech.github.io/DyCon-Blog/tutorial/wp01/T00020</link>
        <guid isPermaLink="true">https://DeustoTech.github.io/DyCon-Blog/tutorial/wp01/T00020</guid>
        
        <category>DyCon Toolbox</category>
        
        
        <category>tutorial</category>
        
        <category>WP01</category>
        
      </item>
    
      <item>
        <title>Averaged Control</title>
        <description>In this work, we address the optimal control of parameter-dependent systems. We introduce the notion of averaged control in which the quantity of interest is the average of the states with respect to the parameter family



More precisely, we are interested in solving the next minimization problem:



Where $\mathcal{U}_{ad}$ is the space of admissible controls and $\bar{x}$ the average state target. The optimization problem (\ref{eq:costFunctional}) is subject to the finite dimensional linear control system



In (\ref{eq:primalODE}), the vector valued function $ x \left( t, \nu \right) \in \mathbb{R}^N$ is the state of the system, $A \left( \nu \right)$ is a $N \times N$-matrix governing its free dynamics and $u=u\left( t \right) \in \mathbb{R}^M $ is a $M$-component control, with $M \leq N$, entering and acting on the system through the control operator $B\left( \nu \right)$, a $N \times M$ parameter-dependent matrix. Moreover, the initial datum $x^0 \in \mathbb{R}^N$ to be controlled is independent of the parameter $\nu$, but the state of the system itself $x \left( t, \nu \right)$ depends on $\nu$. The effective value of the parameter $\nu$ being unknown, we aim at choosing a control that would perform optimally in an averaged sense, this is, rather than controlling specific realizations of the state, the average with respect to $\nu$ is controlled. This allows building a control independent of the parameter and making a robust compromise of all the possible realizations of the system for the various possible values of the unknown parameter $\nu$

We use the classical gradient descent method based on the adjoint methodology, and obtain the corresponding adjoint system for (\ref{eq:primalODE}),



To minimize the functional in (\ref{eq:costFunctional}), we take the steepest descent direction given by



Hence, the new control reads as



for some $\gamma$ small enough.

We have also used the conjugate gradient method in order to reach faster the optimal control. In order to be able to apply this method the state vector has been split as



where $z_u$ is the solution to the controlled system with zero initial condition,



and $y$ solves the free dynamics problem,



The functional in \ref{eq:costFunctional} can be expressed as



We introduce the linear operator



and its dual counterpart,



where $p\left(t, \nu\right)$ is solution to



By doing this we can write the functional gradient as



After having defined $A_{cg}$ and $b_{cg}$ we can apply the conjugate gradient method to solve the control problem.

Algorithm 1 Optimal control with Conjugate Gradient Method
Require: $A\left( \nu \right)$, $B\left( \nu \right)$, $x^0$, $u^{\left(0\right)}$, $\beta$, $T$, $\bar{x}$, $tol$

$n \gets 0 $
 compute $\bar{y} \left( T \right)$
 $b \gets \Lambda^*\left( \bar{x} - \bar{y} \left( T \right) \right)$
 $z \gets \Lambda u$
 $g \gets \Lambda^*z + \beta u - b$
 $h \gets ||g||^2_{L^2\left(\left[0,T\right]\right)}$
 $h_a \gets h$
 $r \gets -g$
While $||r||_{L^2\left(\left[0,T\right]\right)} &amp;gt; tol $ do
  &amp;emsp; &amp;emsp;    $z \gets \Lambda r$
  &amp;emsp; &amp;emsp;    $w \gets \Lambda^*z + \beta r$
  &amp;emsp; &amp;emsp;    $\alpha \gets \frac{h}{\left(r,w\right)_{L^2\left(\left[0,T\right]\right)}}$
  &amp;emsp; &amp;emsp;    $u \gets u + \alpha r$
  &amp;emsp; &amp;emsp;    $g \gets g + \alpha w$
  &amp;emsp; &amp;emsp;    $h_a \gets h$
  &amp;emsp; &amp;emsp;    $h \gets ||g||^2_{L^2\left(\left[0,T\right]\right)}$
  &amp;emsp; &amp;emsp;    $\gamma \gets \frac{h}{h_a}$
  &amp;emsp; &amp;emsp;    $r \gets -g + \gamma r$
  &amp;emsp; &amp;emsp;    $n \gets n + 1$

Figure 1.a: Control system with $N=3$, $M=1$ and target average state $\bar{x}=[0,0,0]^t$. Average state vector components.

Figure 1.b: Control system with $N=3$, $M=1$ and target average state $\bar{x}=[0,0,0]^t$. Control.

Figure 2: State vector components for every parameter $\nu_i$. One can observe that the final state $x\left(T, \nu_i \right)$ is not close to $\bar{x}=[0,0,0]^t$ in general.

Bibliography

[1] E. Zuazua (2014) Averaged Control. Automatica, 50 (12), p. 3077-3087.

Authors: Víctor Hernández-Santamaría, José Vicente Lorenzo, Enrique Zuazua
March, 2018
</description>
        <pubDate>Wed, 12 Dec 2018 00:00:00 +0100</pubDate>
        <link>https://DeustoTech.github.io/DyCon-Blog/tutorial/wp01/T00010</link>
        <guid isPermaLink="true">https://DeustoTech.github.io/DyCon-Blog/tutorial/wp01/T00010</guid>
        
        <category>DyCon Toolbox</category>
        
        
        <category>tutorial</category>
        
        <category>WP01</category>
        
      </item>
    
      <item>
        <title>Rays propagation of a fractional Schrodinger Equation</title>
        <description>Shows the propagation of the solution of a fractional Schrodinger equation with concentrated and highly oscillatory initial datum. The solution remains concentrated along the rays of geometric optics

N = 250;
L = 1;
hx = (2*L)/(N+1);


Definition of the initial datum u0 as a function_handle. u0 is chosen as a Gaussian profile multiplied by a higly oscillatory function

x0 = 0; %% Center of the Gaussian profile
gamma = hx^(-0.9); %% Amplitude of the Gaussian profile
fr = (1/hx)*pi^2/16; %% Frequency of the oscillations


u0 = @(x) exp(-0.5*gamma*(x-x0).^2).*exp(1i*fr*x);


Plot of the initial datum

fig = gcf;
set(gcf,'Units','pixels','Position',[427 306 712 284])

x = -L:hx:L;

subplot(1,3,1) %% Modulus
plot(x,abs(u0(x)))
title('\vertu_0(x)\vert')
xlabel('x'); ylabel('u(x)');

subplot(1,3,2) %% Real part
plot(x,real(u0(x)))
title('real(u_0(x))')
xlabel('x'); ylabel('u(x)');

subplot(1,3,3) %% Imaginary part
plot(x,imag(u0(x)))
title('img(u_0(x))')
xlabel('x'); ylabel('u(x)');




Solution for s = 1/2

Define the characteristic parameters of the problem

s = 0.5  %% Order of the fractional Laplacian
L        %% Extrema of the space interval
N        %% Number of points in the space mesh
T = 5    %% Length of the time interval
u0       %% The function_handle that we have showed before.



s =

    0.5000


L =

     1


N =

   250


T =

     5


u0 =

  function_handle with value:

    @(x)exp(-0.5*gamma*(x-x0).^2).*exp(1i*fr*x)




To solve the equation, we call the function fractional_schr. The solution of the equation is stored in the u variable.

[x,t,u] = fractional_schr(s,L,N,T,u0);


Now we can see a graphical interpretation

[X,T] = meshgrid(x,t);
%%
clf
mesh(X,T,u');
view(0,90)
xlabel('x'); ylabel('t'); title('Ray Evolution');




By typing “animation(x,t,u)” in the MATLAB console you can see the evolution in time of this wave.



</description>
        <pubDate>Sat, 21 Jul 2018 00:00:00 +0200</pubDate>
        <link>https://DeustoTech.github.io/DyCon-Blog/tutorial/wp05/P0012</link>
        <guid isPermaLink="true">https://DeustoTech.github.io/DyCon-Blog/tutorial/wp05/P0012</guid>
        
        
        <category>tutorial</category>
        
        <category>WP05</category>
        
      </item>
    
      <item>
        <title>Rays propagation of a fractional Schrodinger Equation</title>
        <description>Shows the propagation of the solution of a fractional Schrodinger equation with concentrated and highly oscillatory initial datum. The solution remains concentrated along the rays of geometric optics

N = 250;
L = 1;
hx = (2*L)/(N+1);


Definition of the initial datum u0 as a function_handle. u0 is chosen as a Gaussian profile multiplied by a higly oscillatory function

x0 = 0; %% Center of the Gaussian profile
gamma = hx^(-0.9); %% Amplitude of the Gaussian profile
fr = (1/hx)*pi^2/16; %% Frequency of the oscillations


u0 = @(x) exp(-0.5*gamma*(x-x0).^2).*exp(1i*fr*x);


Plot of the initial datum

fig = gcf;
set(gcf,'Units','pixels','Position',[427 306 712 284])

x = -L:hx:L;

subplot(1,3,1) %% Modulus
plot(x,abs(u0(x)))
title('\vertu_0(x)\vert')
xlabel('x'); ylabel('u(x)');

subplot(1,3,2) %% Real part
plot(x,real(u0(x)))
title('real(u_0(x))')
xlabel('x'); ylabel('u(x)');

subplot(1,3,3) %% Imaginary part
plot(x,imag(u0(x)))
title('img(u_0(x))')
xlabel('x'); ylabel('u(x)');




Solution for s = 1/2

Define the characteristic parameters of the problem

s = 0.5  %% Order of the fractional Laplacian
L        %% Extrema of the space interval
N        %% Number of points in the space mesh
T = 5    %% Length of the time interval
u0       %% The function_handle that we have showed before.



s =

    0.5000


L =

     1


N =

   250


T =

     5


u0 =

  function_handle with value:

    @(x)exp(-0.5*gamma*(x-x0).^2).*exp(1i*fr*x)




To solve the equation, we call the function fractional_schr. The solution of the equation is stored in the u variable.

[x,t,u] = fractional_schr(s,L,N,T,u0);


Now we can see a graphical interpretation

[X,T] = meshgrid(x,t);
%%
clf
mesh(X,T,u');
view(0,90)
xlabel('x'); ylabel('t'); title('Ray Evolution');




By typing “animation(x,t,u)” in the MATLAB console you can see the evolution in time of this wave.



</description>
        <pubDate>Sat, 21 Jul 2018 00:00:00 +0200</pubDate>
        <link>https://DeustoTech.github.io/DyCon-Blog/tutorial/wp04/P0001</link>
        <guid isPermaLink="true">https://DeustoTech.github.io/DyCon-Blog/tutorial/wp04/P0001</guid>
        
        
        <category>tutorial</category>
        
        <category>WP04</category>
        
      </item>
    
      <item>
        <title>Yacoubas</title>
        <description>
</description>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0100</pubDate>
        <link>https://DeustoTech.github.io/DyCon-Blog/author/YacoubaS</link>
        <guid isPermaLink="true">https://DeustoTech.github.io/DyCon-Blog/author/YacoubaS</guid>
        
        
        <category>author</category>
        
      </item>
    
      <item>
        <title>Xinliangl</title>
        <description>
</description>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0100</pubDate>
        <link>https://DeustoTech.github.io/DyCon-Blog/author/XinliangL</link>
        <guid isPermaLink="true">https://DeustoTech.github.io/DyCon-Blog/author/XinliangL</guid>
        
        
        <category>author</category>
        
      </item>
    
      <item>
        <title>Victorh</title>
        <description>
</description>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0100</pubDate>
        <link>https://DeustoTech.github.io/DyCon-Blog/author/VictorH</link>
        <guid isPermaLink="true">https://DeustoTech.github.io/DyCon-Blog/author/VictorH</guid>
        
        
        <category>author</category>
        
      </item>
    
      <item>
        <title>Umbertob</title>
        <description>
</description>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0100</pubDate>
        <link>https://DeustoTech.github.io/DyCon-Blog/author/UmbertoB</link>
        <guid isPermaLink="true">https://DeustoTech.github.io/DyCon-Blog/author/UmbertoB</guid>
        
        
        <category>author</category>
        
      </item>
    
      <item>
        <title>Noborus</title>
        <description>
</description>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0100</pubDate>
        <link>https://DeustoTech.github.io/DyCon-Blog/author/NoboruS</link>
        <guid isPermaLink="true">https://DeustoTech.github.io/DyCon-Blog/author/NoboruS</guid>
        
        
        <category>author</category>
        
      </item>
    
      <item>
        <title>Michaels</title>
        <description>
</description>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0100</pubDate>
        <link>https://DeustoTech.github.io/DyCon-Blog/author/MichaelS</link>
        <guid isPermaLink="true">https://DeustoTech.github.io/DyCon-Blog/author/MichaelS</guid>
        
        
        <category>author</category>
        
      </item>
    
  </channel>
</rss>
